c###rec533.for
      winapp 100000,160000
      PROGRAM REC533w
cccD    +               (filein,fileout,areach)
      include <windows.ins>
      save
c***********************************************************************
c          Execute with:
c                  REC533W [SILENT] directory [method] filein fileout area
c                       where:
c                             directory=installation directory (e.g. c:\ITSHFBC)
c                             method  = area  = area coverage mode
c                                     = batch
c                                     = ciraf = create output to 911 CIRAF test points
c                             filein  = input card image data file
c                             fileout = output file to create
c                             area    =   = normal point-to-point
c                                     = a = area coverage mode
c                                           fileout is directory name
c                                           filein 1st record contains name
C***********************************************************************
C.....THIS MICROCOMPUTER-BASED PROCEDURE FOLLOWS THE SPECIFICATION
C.....OF CCIR REC 533 AND HAS BEEN DEVELOPED FROM THE REP 894
C.....PROGRAM FOR THE CCIR BY M I DICK,RAL,UK ,H SIZUN,CNET,FRANCE
C.....G HAND,ITS,BOULDER,USA, K HUNT,EBU, G ROBINSON,IPS,AUSTRALIA
C.... OF DG-7 OF WP-6A. REP894 WAS DERIVED FROM CODE SUPPLIED BY THE ITS
C.... AND THE FTZ,GERMANY (L TETERS and F STEWARD,ITS; P SUESSMANN,FTZ)
C.....
C     NOTE THAT THE SUBROUTINES DATE,TIME HAVE BEEN INCORPORATED INTO
C     THE RAL VERSION IN ORDER TO INDICATE DATE OF RUN,AND TO CALC.
C     RUN TIMES.THEY ARE PART OF THE LIBRARY OF THE FORTRAN COMPILER
C     USED.OTHER FORTRAN COMPILERS MAY HAVE EQUIVALENTS.THESE
C     SUBROUTINES,AND THEIR ARGUMENTS,MAY HOWEVER BE SAFELY REMOVED
C     FROM THIS PROGRAM IF SO REQUIRED.
C ----------------------------------------------------------------------
C     THIS PROGRAM PREDICTS HF SKYWAVE FIELD STRENGTH,SIGNAL-TO-NOISE,
C     AND PROBABILITY OF ACHIEVING A REQUIRED S/N AS A FUNCTION OF
C     TIME AND FREQUENCY WITH MUF,LUF,FOT AND OPERATIONAL MUF AT EACH
C     TIME WHERE MUF=BASIC MUF,LUF=LOWEST FREQUECY AT WHICH A SPECIFIED
C     RELIABILITY(PROB. OF ACHIEVING A REQ'D S/N),FOT=LOWER DECILE OF
C     THE OPERATIONAL MUF(BASIC MUF*OPERATIONAL MUF FACTOR)
C ----------------------------------------------------------------------
C     TECHNICAL INFORMATION FOR THIS PROGRAM CAN BE FOUND IN CCIR
C     REPORTS: CCIR 252-2 AND ITS SUPPLEMENT,CCIR 322-3
C               CCIR 258-4,CCIR 340-4(REC 434),CCIR 894-2(REC 533)
C ----------------------------------------------------------------------
C     THE PROGRAM INPUT CONSISTS OF:
C
C  1. CARD IMAGES GENERATED BY THE CURSOR-INTERACTIVE INPUT
C     WHICH ARE THEN READ IN FUNCTION MONITR.
C  2. IONOSPHERIC DATA BASE FILE CONSISTING OF COEFFICIENTS FOR
C     PREDICTING IONOSPHERIC PARAMETERS FOF2,M(3000)F2,TOGETHER WITH
C     ATMOSPHERIC NOISE PARAMETERS,SYSTEM LOSS
C ----------------------------------------------------------------------
C     THESE CARD IMAGES WHICH CONTAIN A CARD "NAME INDENTIFIER" USED TO
C     A CARD "NAME IDENTIFIER" USED TO IDENTIFY THE INPUT PARAMETERS
C     THE FOLLOWING "NAME IDENTIFIERS" ARE IMPLEMENTED
C
C     IDENTIFIER             DESCRIPTION OF INPUT PARAMETERS
C
C     OUTPUT          RUN OPTION, CONTROL PARAMETERS, PAGE NUMBER
C     MSUN            YEAR AND MONTH (1=JANUARY, 2=FEBRUARY, ...)
C                     AND SUNSPOT NUMBER
C     TIME            U.T. START,FINISH,AND STEP INTERVAL
C     TRANS           TRANSMITTER NAME AND C0-0RDINATES
C     RECVR           RECEIVER NAME AND C0-0RDINATES
C     SYSTEM          POWER, NOISE, MIN.ANGLE, DECILE, ANT BEAR, ANT AZ
C     NOISE           NOISE PARAMS(MAN-MADE NOISE,REQ'D S/N,BANDWIDTH)
C     FREQUENCY       FREQUENCY COMPLEMENT
C     EXECUTE         EXECUTE PROGRAM WITH PARAMETERS CURRENTLY SET
C     QUIT            TERMINATION OF PROGRAM EXECUTION
C     METHOD*         RUN OPTION, CONTROL PARAMETERS, PAGE NUMBER
C     MONTH*          YEAR AND MONTH (1=JANUARY, 2=FEBRUARY, ...)
C     SUNSPOT*        SUNSPOT NUMBER
C     LABEL*          ALPHANUMERIC LABEL FOR IDENTIFICATION
C     CIRCUIT*        TRANSMITTER-RECEIVER LOCATIONS
C-----NOTE CARDS (METHOD,MONTH,SUNSPOT,LABEL,AND CIRCUIT) ARE
C-----IN THE OLD STYLE FORMAT AND HAVE REPLACED BY CARDS
C-----OUTPUT,MSUN,TRANS,AND RECVR
C-----HOWEVER,THIS VERSION WILL READ CARDS IN BOTH FORMATS
C ----------------------------------------------------------------------
C     LOGICAL UNIT DEFINITION FOR PROGRAM REC533-0
C
C     LOGICAL UNIT     MNEMONIC              FILE DESCRIPTION
C          2       *     LU2         DATA BASE OF MONTHLY MEDIAN COEFFS
C          5             LU5         PRIMARY USER DEFINED INPUT
C          6             LU6         PRIMARY LINEPRINTER/DISK OUTPUT
C          7                         OUTPUT FILE FOR CNET GRAPHICS
C          8             LU8         OUTPUT FILE RAL GRAPHICS
C         10             LU61        TEMPORARY INTERNAL FILE
C         16             LU16        SECONDARY VDU OUTPUT
C    * DENOTES A BINARY FILE, ALL OTHERS ARE FORMATTED FILES
C ----------------------------------------------------------------------
C     THE FOLLOWING RUN OPTIONS ARE AVAILABLE IN THIS PROGRAM
C
C   METHOD=1   FIELD STRENGTH TABULATION
C         =2   SIGNAL-TO-NOISE TABULATION
C         =3   REQ'D S/N ACHIEVED (INDIC. BY *)
C         =4   PREDICTION OF BEST USABLE FREQ. SELECTED FROM USER LIST
C         =5   GRAPHICAL PRESENTATION OF LUF,OPERATIONAL MUF
C         =6   (EXTENDED OUTPUT) TABULATION OF MODE,ANGLE,FIELD STRENGTH
C              SIGNAL-TO-NOISE,AND PROB. OF ACHIEVING REQ'D S/N
C         =7   (MULTI MODE EXTENDED OUTPUT) AS METHOD=6,BUT GIVING RSS
C              SUM AND THREE STRONGEST MODES (NOT CURRENTLY IMPLEMENTED)
C ----------------------------------------------------------------------
C     THE FOLLOWING SUBROUTINES CONTAIN FORTRAN "DATA" STATEMENTS
C     WHICH MAY BE INCOMPATIBLE ON VARIOUS COMPUTERS:
C
C    BLOCK DATA,MICROP, ANTCAL,DBU252,DECRED, EVLGOG,EVLTIM,FTZ
C    GEOM,MAGFIT,OUTBOD,OUTTOP,REDMAP,WINTER,& FUNCT. FOP
C ----------------------------------------------------------------------
      LOGICAL LHOP
      INTEGER*4 PERCENT
      CHARACTER*4 NAMES,PERI(2),APW
      CHARACTER*40 VERSN
C    INPUT AND OUTPUT FILE NUMBERS
      COMMON / FILES / LUI,LUO,LU2,LU5,LU6,LU8,LU16,LU61,LU7,LU15
      common /cmonssn/ months(12),ssns(12)
      common /chours/ nhours,ihours(24)
      COMMON /RGRID/ IPROJ,PLATD,PLOND,XMIN,XMAX,YMIN,YMAX,NX,NY
ccc      common /Cp1240/ ionce_p1240,table2(6,8,3,3)  !  (time,latitude,season,ssn)
      common /C_fof2_var/ ionce_fo,dl_fof2(24,19,3,3),du_fof2(24,19,3,3)
C ----------------------------------------------------------------------
      COMMON /CON/D2R, DCL, GAMA, PI, PI2, PIO2, R2D, RZ, VOFL
      COMMON /DON/AMIN,AMIND,BTR,BTRD,BRTD,GCD,GCDKM,PWR,XPW,APW
     A ,RLAT,RLATD,RLONG,RLONGD,SSN,TLAT,TLATD,TLONG,TLONGD,PLAT,PLONG
     B ,PGLAT,ACAV,ASM,FEAV,GMT,VERSN,XLZ,GCDFTZ,GCDEND,XINTS,XINTL
     C ,FLUX,CY12(5),DMXA(24),DMX0,CYRAD(5)
      LOGICAL YNOISE
      COMMON /TNOISE/BDWTH,JBW,JRSN,LUF,MAN,RLUF,RSN,XSN(2),YNOISE
      COMMON /NSTATS/ DU,DL,DUA,DLA,DUM,DLM,DUG,DLG
      COMMON /NOISE/ ATMO,GNOS,XNOISE,SFA,ATNU,ATNY,CC,TM,KJ,JK
      COMMON /FRQ/ FREL(12),FREL5(11,7),FW5(11,7),MAXF,MF,KOF,FREQ
     A, JKF,FXEMAX
      COMMON/FSTAB/ZTAB(24,12),ZSPWR(24,12)
      COMMON/GEOG/ABIY(5),CLAT(5),CLONG(5),CLCK(5),EPSPAT(5),F2M3(5)
c>>(b)WP-6A SEPT. 93 MODS add 2 lines REMOVE 1 LINE
     A,FI(3,5),GLAT(5),GMDIP(5),GYZ100(5),GYR100,GYZ300(5),HPF2(5),RD(5)
     B,SIGPAT(5),CYCEN(5)
CX   A,FI(3,5),GLAT(5),GMDIP(5),GYZ(5),HPF2(5),RD(5),SIGPAT(5),CYCEN(5)
c>>(b)WP-6A SEPT. 93 MODS end of change
      character*4 IRLAT,IRLONG,ITLAT,ITLONG,IRCVR,ITRANS
      COMMON/ION/ IRLAT,IRLONG,ITLAT,ITLONG,IRCVR(5),ITRANS(5),IT,ITRUN
     A,IT1,IT2,ITSTEP,KM,IA,METHOD,ICON,NPSL,NYEAR,NPAGO,ICGM
      COMMON /D2HOP/ LHOP,NK,KM1,KM2,KM3
      COMMON /IPAR/ XF2(3,24),XM3(3,24),XE(5,24),CY24H(5,24),KF
C RAY MODES FOR DISTANCE GHOP,SEE SUBROUTINE CURMUF
      COMMON/MODES/ DELMOD(9),UTMOD(9),ABPS(9),FLDST(9),FSLOS(9)
     1,GRLOS(9),TLOSS(9),XLOSS(9),DELMD1(9),UTMD1(9),KANGLE(12)
     2,DBLOS(12),DBU(12),MODE(12),NHP(12),KANGLA(24,12)
     3,MODEA(24,12),KANGL4(4,12),KDBU4(4,12),DBU4(4,12),MODE4(4,12)
     4,NHP4(4,12),KODEA(24,12)
       character*4 MODE,MODEA,MODE4
      COMMON/MUFS/ EMUF(24,3),F2MUF(24,6),ALLMUF(24),EFMUF(24),FOT(24)
     A,FOT1(24),XLUF(24),ZLUF(24),OPMUF(24),OPMUF1(24),FU(24),FL(24)
     B, KFN,LUFC,NLOOP,ACT1,DXL,XMODE,FX,PR
      COMMON/NAMEX/NAMES(20),ISSN,IRED,LINES,LPAGES,MAPIN,KRUN
      COMMON /SOL/ DECL12(12),EQT12(12),DECL,EQT,MONTH,IMON(12)
      COMMON/ONE/IFA(10),IMA(10),F2COF(13,76),FM3COF(9,49),SYS(9,16,6)
      COMMON /TWO /DUD(5,12,5),FAM(14,12),FAKP(29,16,6),FAKABP(2,6)
      COMMON /FADE/ PERCENT,FRACX,FSX,FBX,DUSN,DLSN,SDU,SDL,SHU,SHL
C   COMMONS FROM FTZ CODE
      COMMON /XK/ YTAB(24,12), YSPWR(24,12), XLY
      COMMON /XG/ FSCHR(2,24),FBTRM(2,24),YLUF(24),UF(24)
      COMMON/XM/ZLONG(50),ZLAT(50),IMIT(5),GYRO(5),GYRZ
      common /cmodel/ model
      character model*6
      common /carea/ area
      character area*1
      common /CFS_limit/ FS_limit
      common /Cdistance/ idistance,ndistance,ihr     !  plot vs distance
      common /Ctime/ ntime                           !  plot vs time
      common /cnfreqs/ nfreqs
      character filein*40,fileout*40,areafile*30
      EQUIVALENCE (NAMES(19),PERI(1))
      DIMENSION XDBU(24,12),SPWR(24,12),SNA(24,12),PSN(24,12)
      DIMENSION SNAxx(24,12)
      dimension cxlat(911),cxlon(911)
      character chmode*6
      character areach*1
      character run*50,message*80,PROGRAM*300,alf4*4
      character cmnam*64,title*80,area_meth*1,alf*20,ich*1
      integer*4 window_handle,error_code
      integer*2 x_pos,y_pos,xsize,ysize,istat
      logical doesit*4,fexists@*4
      real*8 start_time,end_time
      common /crun_directory/ run_directory
         character run_directory*50
      common /cQUIET/ iquiet     !  =1=SILENT
      character alf_narea_batch*4,alf_iarea_batch*4
      character alf_CIRAF*10,alf_NAME*40
      character alf_elapsed_time*8,alf_fileout*50
      common /Cprogress/ iarea_batch,alf_label
         character alf_label*80
      common /Ccancel_batch/ icancel_batch
      external cancel_batch
      character alf80*80
      integer (kind=3) count_underflow
      logical (kind=2) permission
C ---------------------------------------------------------------------
      permission=.true.     !  ignore underflows
ccc      permission=.false.    !  track underflows
      call permit_underflow@(permission)
C ---------------------------------------------------------------------
C.....START OF PROGRAM
      run=cmnam()
      call ucase(run,nch)
         nch=lcount(run,50)
         if(nch.lt.3) go to 930
      iquiet=0
      if(run(1:6).eq.'SILENT') then     !  do not create output window
         iquiet=1
         run=cmnam()
         nch=lcount(run,50)
         if(nch.lt.3) go to 930
      end if
      idump=1
ccc      ionce_p1240=0            !  to initialize reading of p1240.dat
      ionce_fo=0            !  to initialize reading of fof2var.txt
c****************************************************************
      if(iquiet.eq.0) then
         title='REC533 output'
         xsize=GetSystemMetrics(SM_CXSCREEN)
         ysize=GetSystemMetrics(SM_CYSCREEN)/3
         x_pos=0
         y_pos=0
         window_handle=create_window(title,x_pos,y_pos,xsize,ysize)
         ier= set_default_window@(window_handle)
      end if
c****************************************************************
      if(run(1:1).eq.' ') run='C:\ITSHFBC'
      nch=lcount(run,50)
      run_directory=run(1:nch)//'\RUN'
      call set_run           !  set to the ..\RUN directory
      nch_run=lcount(run_directory,50)
      if(iquiet.eq.0)
     +write(*,'('' Executing from dir='',a)') run_directory(1:nch_run)
c******************************************************************
      iarea_batch=0
      icancel_batch=0
      iciraf_flag=0
      filein=cmnam()
      if(filein(1:1).eq.' ') filein='AREA'
      if(filein(1:1).eq.' ') filein='rec533x.dat'
      call lcase(filein,40)
      ndistance=1
      ntime=0
      if(filein(1:5).eq.'area ') then       !  area coverage
         area_meth=cmnam()
         if(area_meth.eq.' ') area_meth='c'
         filein=cmnam()
         if(filein.eq.' ') filein='default\def1.rec'
         call lcase(filein,40)
         if(filein(1:12).eq.'recareaw.cir') then    !  batch area coverage
            call seconds_since_1980@(start_time)    !  use to calc time
            iarea_batch=iarea_batch+1
            open(61,file=run_directory(1:nch_run)//'\'//filein,
     +              status='old',err=920)
            rewind(61)
            call count_batch(61,narea_batch)  !  count # files to process
            read(61,'(a)',end=999) filein
            write(*,39) iarea_batch,narea_batch,filein
39          format(' BATCH area file(',i4,' of ',i4,'):',a)
            write(alf_narea_batch,'(i4)') narea_batch
            write(alf_iarea_batch,'(i4)') iarea_batch
            call seconds_since_1980@(end_time)    !  use to calc time
            elapsed=end_time-start_time
            write(alf_elapsed_time,'(f8.1)') elapsed/60.
            k=winio@('%ca[Batch REC533 Area calculations progress]&')
            alf_fileout=' '
            k=winio@('fileout= %50st&',alf_fileout)
            alf_label=' '
            k=winio@('%nl%80st&',alf_label)
            k=winio@('%nl%nl%cnCalculating file %tc[red]%4st %tc[black]'
     +               //' of '//alf_narea_batch//'&',alf_iarea_batch)
            k=winio@('%nl%cnElapsed time: %tc[red]%8st %tc[black]'//
     +               'minutes&',alf_elapsed_time)
            icancel_batch=0
            k=winio@('%nl%nl%cn%^bt[Cancel]&',cancel_batch)
            k=winio@('%lw',iprocess_ctrl)      !  leave window open
         end if
         fileout='recareax'
         call areamap(filein,fileout,area_meth)
         areach='A'
         filein='recareax.da1'
         fileout='..\AREADATA\'
      else if(filein(1:6).eq.'batch ') then       !  Batch point-to-point
         areach='B'
         filein='rec533x.dat'
         fileout='rec533b.out'
         nch_out=lcount(fileout,64)
c             !  delete any previous file
         call erase@(run_directory(1:nch_run)//'\'//
     +              fileout(1:nch_out),istat)
         if(istat.ne.0 .and. iquiet.eq.0) then
            write(*,'('' run_dir='',a)') run_directory
            call dos_error_message@(istat,message)
ccc            write(*,'('' istat='',i5,1h=,a)') istat,message
ccc            write(*,'('' file='',a)') run_directory(1:nch_run)//
ccc     +                                   '\REC533B.OUT'
         end if
      else if(filein(1:6).eq.'ciraf ') then       !  CIRAF point-to-point
         areach='Z'
         filein=cmnam()
         fileout=cmnam()
         if(filein(1:1).eq.' ') filein='rec533c.dat'
         if(fileout(1:1).eq.' ') fileout='rec533c.out'
c             !  delete any previous file
         call erase@(run_directory(1:nch_run)//'\'//fileout,istat)
ccc         if(istat.ne.0) then
ccc            write(*,'('' run_dir='',a)') run_directory
ccc            call dos_error_message@(istat,message)
ccc            write(*,'('' istat='',i5,1h=,a)') istat,message
ccc            write(*,'('' file='',a)') run_directory(1:nch_run)//
ccc     +                                   '\'//fileout
ccc         end if
            
            write(alf_narea_batch,'(i4)') narea_batch
            write(alf_iarea_batch,'(i4)') iarea_batch
            alf_CIRAF='xxx of xxx'
            k=winio@('%ca[REC533 CIRAF calculations progress]&')
            alf_fileout=fileout
            k=winio@(alf_fileout//'&')
            alf_NAME=' '
            k=winio@('%nl%40st&',alf_NAME)
            k=winio@('%nl%nl%cnCalculating CIRAF points %tc[red]%10st'//
     +               '%tc[black]&',alf_CIRAF)
            icancel_batch=0
            k=winio@('%nl%nl%cn%^bt[Cancel]&',cancel_batch)
            k=winio@('%lw',iprocess_ctrl)      !  leave window open
            iciraf_flag=1
      else if(filein(1:11).eq.'rec533d.dat') then
         ndistance=51                          !  plot vs distance
         open(48,file=run_directory(1:nch_run)//'\REC533D.IDX')
         rewind(48)
         call erase@(run_directory(1:nch_run)//'\REC533D.DST',istat)
         open(49,file=run_directory(1:nch_run)//'\REC533D.DST',
     +        access='direct',form='unformatted',recl=108)
         fileout='rec533d.out'
      else if(filein(1:11).eq.'rec533t.dat') then
         ntime=1                               !  plot vs time
         open(48,file=run_directory(1:nch_run)//'\REC533T.IDX')
         rewind(48)
         call erase@(run_directory(1:nch_run)//'\REC533T.DST',istat)
         open(49,file=run_directory(1:nch_run)//'\REC533T.DST',
     +        access='direct',form='unformatted',recl=96)
         fileout='rec533t.out'
      else
         fileout=cmnam()
         if(fileout(1:1).eq.' ') fileout='rec533x.out'
         call lcase(fileout,40)
      end if
      if(filein(1:1).eq.' ' .or. fileout(1:1).eq.' ')
     +          stop 'Must execute with: rec533w filein fileout'
      area=areach
      if(area.eq.'a') area='A'
      iabort=0
      call del_abt     !  delete the rec533.abt & recarea.abt files
c****************************************************************
ccc      open(61,file='\itshfbc\run\rec533d.txt')
ccc      rewind(61)
C.....SET LOGICAL UNIT NUMBERS FOR PRIMARY INPUT(LUI),OUTPUT(LUO)
      LUI=LU5
      LUO=LU6
C.....
40    if(area.eq.'A') then              !  area coverage calculations
         OPEN(LUI,file=run_directory(1:nch_run)//'\'//filein,
     +        STATUS='OLD',FORM='FORMATTED')
         rewind(LUI)
         read(LUI,'(20x,a)') areafile     !  get real file name of output
         close(LUI)
         nch=lcount(fileout,40)
         nch2=lcount(areafile,30)
         nch3=lcount(filein,20)
         areafile(nch2-2:nch2)='rg'//filein(nch3:nch3)
         fileout(nch+1:nch+nch2)=areafile(1:nch2)
      else if(area.eq.'B') then              !  Batch point-to-point
         call read_asc('REC533',*999)   !  read pt-pt common from REC533W.ASC
         open(38,file=run_directory(1:nch_run)//'\'//'rec533.cir',
     +        status='old',err=999)
         rewind(38)
         read(38,'(a)',err=999) dum     !  skip 1st record
         icircuit=0
         write(*,'('' Output is being written to: REC533B.OUT'',/)')
         call batch(38,'REC533',filein,icircuit,*999)
      else
      end if
c****************************************************************
C.....OPEN FILE FOR SUPPLEMENTARY OUTPUT TO VDU
      LUO=LU16
      ICON=0
c****************************************************************
50    nch_inp=lcount(filein,40)
      doesit=fexists@(
     +   run_directory(1:nch_run)//'\'//filein(1:nch_inp),error_code)
      if(.NOT.doesit) go to 950      !  if it does not exist, quit
      call antcalc(filein,area)
c****************************************************************
      if(area.eq.'A') then
         write(*,'('' Area filein ='',a)') filein
      end if
      nch_inp=lcount(filein,40)
      OPEN(LUI,FILE=run_directory(1:nch_run)//'\'//filein(1:nch_inp),
     +     STATUS='OLD',FORM='FORMATTED',err=900)
      nch_fot=lcount(fileout,40)
      if(fileout(1:11).eq.'REC533B.OUT' .or.
     +   fileout(1:11).eq.'rec533b.out') then     !  batch, use APPEND
         OPEN(LUO,file=run_directory(1:nch_run)//'\'//
     +        fileout(1:nch_fot),
     +        status='APPEND')
      else if(fileout(1:2).eq.'..') then
         write(*,'('' Area fileout='',a)')
     +                 run_directory(1:nch_run-3)//fileout(4:nch_fot)
         if(iarea_batch.ne.0) then
            alf_fileout='..\'//fileout(4:nch_fot)
            call window_update@(alf_fileout)
         end if
         OPEN(LUO,file=run_directory(1:nch_run-3)//fileout(4:nch_fot))
         rewind(LUO)
      else
         OPEN(LUO,file=run_directory(1:nch_run)//'\'//
     +        fileout(1:nch_fot))
         rewind(LUO)
      end if
c***********************************************************
      open(12,file=run_directory(1:nch_run-3)//'database\version.w32',
     +     status='old')
      rewind(12)
      read(12,'(a)') VERSN( 8:40)
      close(12)
c***********************************************************
C.....
C.....START OF PROGRAM
  110 CONTINUE
C.....SET LINES > 50 TO GIVE INITIAL FOR EACH OUTPUT
C.....OUTPUT TYPE=6
      IF(METHOD.GE.6) LINES=60
C.....INPUT IS FORMATTED CARD IMAGES
      CALL DECRED
C.....RETURN IF RUN OPTION IS .LE. 0
      IF(ITRUN.le.0) go to 600
      igraph=0                       !  do frel(1-11)
      if(area.eq.'A') go to 1000     !  area coverage
      npoints=1
      idpoints=1
      n12=12
      if(area.eq.'Z') then
         if(IRCVR(3)(1:2).eq.'XX') then     !  read CIRAFP.XXX file
            call rdCIRAFxxx(cxlat,cxlon,npoints)  !  read 911 CIRAF test points
            idpoints=1
         else
            call rdCIRAF911(cxlat,cxlon,npoints)  !  read 911 CIRAF test points
            idpoints=1
         end if
            call seconds_since_1980@(start_time)    !  use to calc time
ccc         npoints=91
         n12=1                       !  only do 1 month/SSN
         igraph=0                    !  never graphs
      end if
      if(frel(1).lt.0.) igraph=1     !  do frel=2 - 30 MHz
      do 595 im=1,n12                !  MONTH & SSN are now pairs (5/18/93)
      if(months(im).eq.0) go to 595
      month=months(im)
      ssn=ssns(im)
      if(igraph.eq.1) write(luo,111) im,month,nint(ssn)
111   format(' COMMENT   GROUP ',i2,i5.2,i5,3hssn)

      call redmap(lu2,month,ssn)
C.....CALC. SOLAR DECLINATION ,'EQUATION-OF-TIME' AND 10.7 cm RADIO
C.....NOISE FLUX ,m12
      DECL=DECL12(MONTH)
      EQT=EQT12(MONTH)
      FLUX=63.75+0.728*SSN+0.00089*(SSN)**2
c***************************************************************
      if(ndistance.ne.1) then             !  plots vs DISTANCE
         npsl=0
         do if=1,11                       !  count # frequencies
            if(frel(if).gt..1) nfreqs=if
         end do
         write(48,'(i5,'' distances'')') ndistance
         write(48,'(i2,11f7.3)') nfreqs,(frel(if),if=1,nfreqs)
         write(48,'(25i3)') nhours,(ihours(i),i=1,nhours)
         write(48,103)
103      format(' 10 MODE  MUF   FOT   OPMUF ANGL  DBU   dBpW  ',
     +              'S/N   FS/N  SNxx  ')
      end if
      if(ntime.ne.0) then                 !  plots vs TIME
         do if=1,11                       !  count # frequencies
            if(frel(if).gt..1) nfreqs=if
         end do
         write(48,'(i2,11f7.3)') nfreqs,(frel(if),if=1,nfreqs)
         write(48,103)
         if(iquiet.eq.0) then
            write(*,'('' Calculating Time plot'')')
         end if
      end if
c***************************************************************
      nfr=1
      if(igraph.eq.1) nfr=3
      do 590 ifr=1,nfr
      if(igraph.eq.1) call runfreqs(ifr,frel)   !  freqs to run
C.....COUNT OF FREQUENCIES KOF
      KOF=MAXF
      DO 115 JF=1,MAXF
      IF(FREL(JF).LE.0.01) GO TO 116
      KOF=JF
  115 CONTINUE
  116 CONTINUE
      if(iquiet.eq.0) write(*,1) month,ssn,(ifix(frel(i)),i=1,10)
1     format('    Executing REC533  month=',i2,'  ssn=',f4.0,
     +       '  Freq=',10i3)
      do 590 ipoint=1,npoints,idpoints
      if(iciraf_flag.ne.0 .and. ipoint.eq.1) then
         if(kof.eq.1) then
            write(alf_NAME,'(5a4,f10.3,4h MHz)') ITRANS,frel(1)
         else
            write(alf_NAME,'(5a4,i8,12h frequencies)') ITRANS,kof
         end if
         call window_update@(alf_NAME)
      end if
      if(iciraf_flag.ne.0 .and. mod(ipoint,10).eq.0) then
         write(alf_CIRAF,'(i3,4h of ,i3)') ipoint,npoints
         call window_update@(alf_CIRAF)
      end if
      if(mod(ipoint,100).eq.0 .and. iquiet.eq.0) then
         write(alf4,'(i4)') ipoint
         call soua@(alf4)
      end if

      if(npoints.gt.1) then      !  set CIRAF test points
         write(ircvr,'(1hP,i3.3)') ipoint
         rlatd=cxlat(ipoint)
         rlongd=cxlon(ipoint)
         call antcalc_ciraf(tlatd,tlongd,rlatd,rlongd,frel)  !  re-calc antennas
ccc         npsl=0                  !  always use Short path
      end if
c***************************************************************
c***************************************************************
ccc      rlat=rlatd*d2r
ccc      rlong=rlongd*d2r
      tlat=tlatd*d2r
      tlon=tlongd*d2r
      rlat_dist=rlatd
      rlon_dist=rlongd
      do 590 idistance=1,ndistance
      if(ndistance.ne.1 .and. iquiet.eq.0) then
         if(mod(idistance-1,5).eq.0) then
            if(idistance.eq.1) then
               write(*,'('' Calculating Distance plot'')')
               call soua@(' Dist/51[')
            end if
            write(alf4,'(i3)') idistance
            call soua@(alf4)
         end if
      end if
ccc      if(idistance.eq.1) then
ccc         rlat=rlat_dist
ccc         rlong=rlon_dist
ccc      else
         call distxy(idistance,ndistance,tlatd,tlongd,
     +               rlat_dist,rlon_dist,npsl,rlatd,rlongd)
ccc         write(luo,'(''after distxy, rlongd='',f8.3)') rlongd
         if(abs(rlatd-tlatd).lt..01 .and.
     +      abs(rlongd-tlongd).le..01) then   !  Tx & Rx cannot be same point
            rlongd=tlongd + .01
            if(rlongd.ge.360.) rlongd=rlongd-360.
         end if
         rlong=rlongd*d2r
         rlat=rlatd*d2r
         if(abs(rlatd).gt.89.9) rlong=0.     !  at poles, force long=0
ccc      end if
c***************************************************************
c          check to see if we should abort processing
      doesit=fexists@(
     +       run_directory(1:nch_run)//'\'//'rec533.abt',error_code)
      if(doesit) then     !  file exists, abort processing
         call erase@(run_directory(1:nch_run)//'\'//'rec533.abt',
     +                         istat)   !  delete file first
         iabort=1         !  indicate we have aborted batch processing
         go to 999        !  quit processing
      end if
      if(icancel_batch.ne.0) then       ! abort processing
         iabort=1         !  indicate we have aborted batch processing
         go to 999        !  quit processing
      end if
c***************************************************************
C.....
C.....VALID RUN OPTION, BEGIN PROGRAM ANALYSIS
C.....WRITE(*,126) METHOD,PERI(2)
ccc  126 FORMAT(' RUNNING METHOD ',I2,' TO ',A4)
C.....NEED DISTANCE FIRST
C.....WRITE(*,127)
ccc  127 FORMAT(1X,/,'****** PATH GEOMETRY DETERMINATION ******')
C.....
C.....SET INITIAL MAX. RANGE Dmax FOR A SINGLE HOP
      DMX0=3400.
      CALL GEOM
C.....NOTE:TRANSITION DIST. CAN BE SET ON INPUT(7000KM=DEFAULT VALUE)
      GCDEND=AMIN1(GCDFTZ+2000., 40001.)
      IF(GCDKM.LE.GCDFTZ) then
         XINTL=0.                             !  all ITS
      else IF(GCDKM.GE.GCDEND) then
         XINTL=1.                             !  all FTZ
      else
         XD=GCDEND-GCDFTZ
         XD=AMAX1(XD,1.0)
         XINTL=(GCDKM-GCDFTZ)/XD
      end if
      XINTS=1.0-XINTL
C......IONOSPHERIC PARAMETERS
       CALL PARION
       ITRUN=1
C......FIELD STRENGTHS
      CALL LUFFY(idump)
      do 260 ihr=1,nhours    !  make hour an outside loop
      call yieldit           !  yield for Windows operation
      jt=ihours(ihr)
      IT=jt
      if(IT.gt.24) IT=IT-24
      if(it.eq.0) it=24
ccc      IF(GCDKM.LT.GCDEND) CALL LUFFY(idump)
ccc      IF(GCDKM.GT.GCDFTZ) CALL FTZ
      if(GCDKM.le.GCDFTZ) then                     !  all ITS
      else if(GCDKM.GE.GCDEND) then                !  all FTZ
ccc         ALLMUF(IT)=EFMUF(IT)
         FOT(IT)=FOT1(IT)
         OPMUF(IT)=OPMUF1(IT)
      else                                         !  interpolate
ccc         ALLMUF(IT)=ALLMUF(IT)*XINTS+EFMUF(IT)*XINTL
         FOT(IT)=FOT(IT)*XINTS+FOT1(IT)*XINTL
         OPMUF(IT)=OPMUF(IT)*XINTS+OPMUF1(IT)*XINTL
         xll=xluf(it)
         XLUF(IT)=ABS(XLUF(IT))*XINTS+ABS(YLUF(IT))*XINTL
c          if Req Rel not met (negative LUF), keep it negative (as a FLAG)
         if(XLUF(IT).lt.0. .or. YLUF(IT).lt.0.) XLUF(IT)=-XLUF(IT)
ccc         write(61,'('' LUF (inetrp)='',i3,3f10.4)') it,xluf(it),
ccc     +             xll,yluf(it)
      end if
      FREL(12)=ALLMUF(IT)
      DO 250 JF=1,12
      XDBU(IT,JF)=-999.
      SPWR(IT,JF)=-999.
      SNA (IT,JF)=-999.
      SNAxx(IT,JF)=-999.
      PSN (IT,JF)=0.
      IF(FREL(JF).LE.0.0) GO TO 250
      if(GCDKM.LE.GCDFTZ) then                     !  all ITS
         XF=ZTAB(IT,JF)
         XPWR=ZSPWR(IT,JF)
ccc         write(16,'('' dBu='',2i5,2f10.4)') it,jf,xf,xpwr
      else if(GCDKM.GE.GCDEND) then                !  all FTZ
         XF=YTAB(IT,JF)
         XPWR=YSPWR(IT,JF)
         XLUF(IT)=YLUF(IT)
ccc         write(61,'('' DBU='',2i5,2f10.4)') it,jf,xf,xpwr
      else                                         !  interpolate
C.....INTERPOLATE (CCIR IWP 6/1 DOC. H21,HELSINKI)
         ZTAB1=ZTAB(IT,JF)
         YTAB1=YTAB(IT,JF)
         IF(ZTAB1.LE.-999.0) ZTAB1=YTAB1
         ZTAB10=10.0**(ZTAB1*0.01)
         YTAB10=10.0**(YTAB1*0.01)
         XF10=ZTAB10*XINTS+YTAB10*XINTL
         XF=100.0*ALOG10(XF10)
C.WP6A-DG2-MID NOW INTERPOLATE FOR SIGNAL POWER (Rec. 533 section 6)
         ZPWR1=ZSPWR(IT,JF)
         YPWR1=YSPWR(IT,JF)
         IF(ZPWR1.LE.-999.0) ZPWR1=YPWR1
         ZPWR10=10.0**(ZPWR1*0.01)
         YPWR10=10.0**(YPWR1*0.01)
         XPWR10=ZPWR10*XINTS+YPWR10*XINTL
         XPWR=100.0*ALOG10(XPWR10)
ccc         write(61,'('' dbu='',2i5,6f10.4)') it,jf,xf,ztab1,ytab1,
ccc     +         zpwr1,ypwr1,xpwr
      end if
      XDBU(IT,JF)=XF
      SPWR(IT,JF)=XPWR + 120.       !  dBpW    (add 120 to convert dBW)
c***************Calc Noise**********************
C..... CALCULATE MEAN ATMOSPHERIC NOISE POWER AT 1 MHZ AT RECEIVER
      RLMT=FLOAT(IT)-RLONG*R2D/15.   !  "-" because E long is "-"
      IF(RLMT.GE.24.) RLMT=RLMT-24.
      IF(RLMT.LT.0.) RLMT=RLMT+24.
      CALL ANOIS1(RLMT,RLAT,RLONG)
C.....CALL FADING TO DETERMINE S/N DEVIATIONS FOR OTHER
C.....PERCENTAGES OF DAYS ON MONTH(METHODS 2,3 ONLY)
      FREQ=FREL(JF)
      CALL FAD842
      SN50=XPWR-SFA-10.0*ALOG10(BDWTH)+204.   !  S/N at 50%
      SFA=SFA-FBX
      SNxx=XPWR-SFA-10.0*ALOG10(BDWTH)+204.   !  S/N at Req. Rel.
ccc      write(luo,52) it,jf,freq,xf,xpwr,sfa,fbx,sn50,SNxx,rlat,rlong
ccc52    format(' poin noise=',2i3,9f10.4)
      IF(XF.LE.-999.0) SN1=-999.0
      SNA(IT,JF)=SN50
      SNAxx(IT,JF)=SNxx
ccc      TSNA(IT,JF)=XSN(2)
ccc      IF(SNA(IT,JF).GE.JRSN) TSNA(IT,JF)=XSN(1)
      CALL SNPROB(SNA(IT,JF),RSN,DUSN,DLSN,PSN(IT,JF))
ccc      write(16,1256) it,jf,zspwr(it,jf),yspwr(it,jf),sna(it,jf),jrsn,
ccc     +               dusn,dlsn,psn(it,jf)
ccc1256  format(2i5,3f10.3,i5,3f10.4)
ccc      write(16,'('' xpwr,sfa,sn1='',4f10.4)') xpwr,sfa,sn50,freq
  250 CONTINUE
c*****************************************************************
      if(area.eq.'Z') then       !  output for CIRAF case
        if(IRCVR(4)(1:2).eq.'WR') then    !  output power
         do i=1,kof    !  fix to eliminate ***** from output file
          if(spwr(it,i).lt.-500.) spwr(it,i)=-500
         end do
         WRITE(LUO,1506) ipoint,it,icgm,frel(12),
     +       (NINT(SPWR(IT,I)*100.+50000.),I=1,KOF)
1506     FORMAT(i3,i3.2,i2,f6.2,9i5,' PWR')
        else if(IRCVR(4)(1:2).eq.'wr') then    !  output power
         do i=1,kof    !  fix to eliminate ***** from output file
          if(spwr(it,i).lt.-500.) spwr(it,i)=-500
         end do
         WRITE(LUO,1516) ipoint,it,icgm,frel(12),
     +       (SPWR(IT,I),I=1,KOF)
1516     FORMAT(i3,i3.2,i2,f6.2,9f5.1,' PWR')
        else if(IRCVR(4)(1:2).eq.'CR' .or.
     +          IRCVR(4)(1:2).eq.'cr') then    !  output BCR
         WRITE(LUO,1507) ipoint,it,icgm,frel(12),
     +                 (PSN(IT,I)*100.,I=1,KOF)
1507     FORMAT(i3,i3.2,i2,f6.2,9f5.2,' BCR')
        else if(IRCVR(4)(1:2).eq.'S ') then    !  output field strength
         do i=1,kof    !  fix to eliminate ***** from output file
          if(xdbu(it,i).lt.-500.) xdbu(it,i)=-500
         end do
         WRITE(LUO,1508) ipoint,it,icgm,frel(12),
     +       (NINT(XDBU(IT,I)*100.+50000.),I=1,KOF)
1508     FORMAT(i3,i3.2,i2,f6.2,9i5,' FS')
        else if(IRCVR(4)(1:2).eq.'s ') then    !  output field strength
         do i=1,kof    !  fix to eliminate ***** from output file
          if(xdbu(it,i).lt.-99.9) xdbu(it,i)=-99.9
         end do
         WRITE(LUO,1518) ipoint,it,icgm,frel(12),
     +       (XDBU(IT,I),I=1,KOF)
1518     FORMAT(i3,i3.2,i2,f6.2,9f5.1,' FS')
        else if(IRCVR(4)(1:2).eq.'ll') then    !  output all
         do i=1,kof    !  fix to eliminate ***** from output file
          if(xdbu(it,i).lt.-99.9) xdbu(it,i)=-99.9
          if(spwr(it,i).lt.-99.9) spwr(it,i)=-99.9
         end do
         WRITE(LUO,1518) ipoint,it,icgm,frel(12),
     +       (XDBU(IT,I),I=1,KOF)
         WRITE(LUO,1519) (SPWR(IT,I),I=1,KOF)
1519     FORMAT(14x,9f5.1,' PWR')
         WRITE(LUO,1510) (PSN(IT,I)*100.,I=1,KOF)
        else if(IRCVR(4)(1:2).eq.'LL' .and. KOF.gt.1) then    !  output all
         do i=1,kof    !  fix to eliminate ***** from output file
          if(xdbu(it,i).lt.-99.9) xdbu(it,i)=-99.9
          if(spwr(it,i).lt.-99.9) spwr(it,i)=-99.9
         end do
         WRITE(LUO,1518) ipoint,it,icgm,frel(12),
     +       (XDBU(IT,I),I=1,KOF)
         WRITE(LUO,1519) (SPWR(IT,I),I=1,KOF)
         WRITE(LUO,1510) (PSN(IT,I)*100.,I=1,KOF)
        else if(IRCVR(4)(1:2).eq.'LL' .and. KOF.eq.1) then    !  output all
          if(xdbu(it,1).lt.-500.) xdbu(it,1)=-500.
          if(spwr(it,1).lt.-500.) spwr(it,1)=-500.
          if(xdbu(it,1).ge.FS_limit) then       !  output results
             WRITE(LUO,1520) ipoint,it,icgm,frel(12),
     +          NINT(XDBU(IT,1)*100.+50000.),
     +          NINT(SPWR(IT,1)*100.+50000.),
     +          PSN(IT,1)*100.
1520         FORMAT(i3,i3.2,i2,f6.2,2i5,f5.2)
          end if
        else                              !  output ALL
         do i=1,kof    !  fix to eliminate ***** from output file
          if(xdbu(it,i).lt.-500.) xdbu(it,i)=-500
          if(spwr(it,i).lt.-500.) spwr(it,i)=-500
         end do
         WRITE(LUO,1508) ipoint,it,icgm,frel(12),
     +       (NINT(XDBU(IT,I)*100.+50000.),I=1,KOF)
         WRITE(LUO,1509) (NINT(SPWR(IT,I)*100.+50000.),I=1,KOF)
1509     FORMAT(14x,9i5,' PWR')
         WRITE(LUO,1510) (PSN(IT,I)*100.,I=1,KOF)
1510     FORMAT(14x,9f5.2,' BCR')
        end if
      else
         if(lines.gt.50) call OUTTOP
         call OUTBOD(XDBU,SPWR,SNA,PSN,SNAxx)
      end if
c*****************************************************************
  260 CONTINUE
  
c*********************************************
590   continue
      if(area.ne.'Z') then
         write(LUO,'(11h End-of-Run)')
      else
         call seconds_since_1980@(end_time)    !  use to calc time
         seconds=end_time-start_time
ccc         open(62,file='rec533.tim')
ccc         rewind(62)
ccc         write(62,591) seconds
ccc591      format(f10.1,' seconds execute time')
ccc         close(62)
      end if
      LINES=60
595   continue                      !  next MONTH & SSN
      GO TO 110
c********************************************************************
c          area coverage
c********************************************************************
1000  do 1005 nf=1,10
      if(frel(nf).le.0.) go to 1006
1005  continue
1006  nf=nf-1
      month=months(1)
      ssn=ssns(1)
      call outareah(LUO,nx,ny)            !  area coverage header output
      if(nf.eq.1) then
         write(*,1001) IMON(month),ihours(1),nint(ssn),frel(1)
1001     format(20x,'REC533  area coverage : ',a4,i3.2,2hut,
     +        i4,'ssn',f7.3,'MHz')
      else
         write(*,1002) IMON(month),ihours(1),nint(ssn),nf
1002     format(20x,'REC533  area coverage : ',a4,i3.2,2hut,
     +        i4,'ssn',f7.3,' max of',i3,' Freqs')
      end if
      call redmap(lu2,month,ssn)
      DO 1900 IY=1,NY
      if(iy.eq.1) then
         write(alf,'(i3,'' rows['',i2)') ny,iy
      else
         write(alf,'(i3)') iy
      end if
      call soua@(alf)
      if(mod(iy,20).eq.0) then
         call sou@(' ')            !  cause a <new line>
         call coua@('        ')    !  space over to line things up
      end if
c          check to see if we should abort processing
      doesit=fexists@(
     +   run_directory(1:nch_run)//'\recarea.abt',error_code)
      if(doesit) then     !  file exists, abort processing
         call erase@('recarea.abt',istat)   !  delete file first
         iabort=1         !  indicate we have aborted batch processing
         go to 999        !  quit processing
      end if
      if(icancel_batch.ne.0) then       ! abort processing
         iabort=1         !  indicate we have aborted batch processing
         go to 999        !  quit processing
      end if
      DO 1900 IX=1,NX
      call yieldit             !  yield for Windows operations
      CALL GRIDXY(IX,IY,RLONGD,RLATD)      !  GET LON/LAT of RECEIVER
      if(abs(RLATD-TLATD).lt..05 .and. abs(RLONGD-TLONGD).le..05) then
         RLONGD=TLONGD+.05
      end if
      if(abs(RLATD).gt.89.9) RLONGD=0.    !  at poles, force longitude=0
      RLONG=RLONGD*D2R
      RLAT =RLATD *D2R
      do 1010 i=1,24
1010  allmuf(i)=-1.
ccc      NPSL=0
C.....CALC. SOLAR DECLINATION ,'EQUATION-OF-TIME' AND 10.7 cm RADIO
C.....NOISE FLUX ,m12
      DECL=DECL12(MONTH)
      EQT=EQT12(MONTH)
      FLUX=63.75+0.728*SSN+0.00089*(SSN)**2
c***************************************************************
C.....COUNT OF FREQUENCIES KOF
      KOF=1
C.....
C.....SET INITIAL MAX. RANGE Dmax FOR A SINGLE HOP
      DMX0=3400.
      CALL GEOM
C.....NOTE:TRANSITION DIST. CAN BE SET ON INPUT(7000KM=DEFAULT VALUE)
      GCDEND=AMIN1(GCDFTZ+2000., 40001.)
      IF(GCDKM.LE.GCDFTZ) then
         XINTL=0.                             !  all ITS
      else IF(GCDKM.GE.GCDEND) then
         XINTL=1.                             !  all FTZ
      else
         XD=GCDEND-GCDFTZ
         XD=AMAX1(XD,1.0)
         XINTL=(GCDKM-GCDFTZ)/XD
      end if
      XINTS=1.0-XINTL
C......IONOSPHERIC PARAMETERS
       CALL PARION
       ITRUN=1
C......FIELD STRENGTHS
      CALL LUFFY(idump)
ccc      IF(GCDKM.LT.GCDEND) CALL LUFFY(0)
ccc      IF(GCDKM.GT.GCDFTZ) CALL FTZ
      ihr=1
      jt=ihours(ihr)
      IT=jt
      if(IT.gt.24) IT=IT-24
      if(it.eq.0) it=24
      if(GCDKM.LE.GCDFTZ) then                     !  all ITS
      else if(GCDKM.GE.GCDEND) then                !  all FTZ
ccc         ALLMUF(IT)=EFMUF(IT)
         FOT(IT)=FOT1(IT)
         OPMUF(IT)=OPMUF1(IT)
      else                                         !  interpolate
ccc         ALLMUF(IT)=ALLMUF(IT)*XINTS+EFMUF(IT)*XINTL
         FOT(IT)=FOT(IT)*XINTS+FOT1(IT)*XINTL
         OPMUF(IT)=OPMUF(IT)*XINTS+OPMUF1(IT)*XINTL
         xll=xluf(it)
         XLUF(IT)=ABS(XLUF(IT))*XINTS+ABS(YLUF(IT))*XINTL
c          if Req Rel not met (negative LUF), keep it negative (as a FLAG)
         if(XLUF(IT).lt.0. .or. YLUF(IT).lt.0.) XLUF(IT)=-XLUF(IT)
      end if
      FREL(12)=ALLMUF(IT)
      JF=1
      XDBU(IT,JF)=-999.
      SPWR(IT,JF)=-999.
      SNA (IT,JF)=-999.
      SNAxx (IT,JF)=-999.
      PSN (IT,JF)=0.
      if(GCDKM.LE.GCDFTZ) then                     !  all ITS
         XF=ZTAB(IT,JF)
         XPWR=ZSPWR(IT,JF)
         write(chmode,'(i4,a2)') KODEA(IT,JF),MODEA(IT,JF)
         ielevang=KANGLA(IT,JF)
      else if(GCDKM.GE.GCDEND) then                !  all FTZ
         XF=YTAB(IT,JF)
         XPWR=YSPWR(IT,JF)
         chmode='   ---'
         ielevang=3
      else                                         !  interpolate
C.....INTERPOLATE (CCIR IWP 6/1 DOC. H21,HELSINKI)
         chmode='   -I-'
         ielevang=3
         ZTAB1=ZTAB(IT,JF)
         YTAB1=YTAB(IT,JF)
         IF(ZTAB1.LE.-999.0) ZTAB1=YTAB1
         ZTAB10=10.0**(ZTAB1*0.01)
         YTAB10=10.0**(YTAB1*0.01)
         XF10=ZTAB10*XINTS+YTAB10*XINTL
         XF=100.0*ALOG10(XF10)
C.WP6A-DG2-MID NOW INTERPOLATE FOR SIGNAL POWER (Rec. 533 section 6)
         ZPWR1=ZSPWR(IT,JF)
         YPWR1=YSPWR(IT,JF)
         IF(ZPWR1.LE.-999.0) ZPWR1=YPWR1
         ZPWR10=10.0**(ZPWR1*0.01)
         YPWR10=10.0**(YPWR1*0.01)
         XPWR10=ZPWR10*XINTS+YPWR10*XINTL
         XPWR=100.0*ALOG10(XPWR10)
      end if
      XDBU(IT,JF)=XF
      SPWR(IT,JF)=XPWR + 120.       !  dBpW    (add 120 to convert dBW)
c***************Calc Noise**********************
C..... CALCULATE MEAN ATMOSPHERIC NOISE POWER AT 1 MHZ AT RECEIVER
      RLMT=FLOAT(IT)-RLONG*R2D/15.   !  "-" because E long is "-"
      IF(RLMT.GE.24.) RLMT=RLMT-24.
      IF(RLMT.LT.0.) RLMT=RLMT+24.
      CALL ANOIS1(RLMT,RLAT,RLONG)
C.....CALL FADING TO DETERMINE S/N DEVIATIONS FOR OTHER
C.....PERCENTAGES OF DAYS ON MONTH(METHODS 2,3 ONLY)
      FREQ=FREL(JF)
      CALL FAD842
      SN50=XPWR-SFA-10.0*ALOG10(BDWTH)+204.   !  S/N at 50%
      SFA=SFA-FBX
      SNxx=XPWR-SFA-10.0*ALOG10(BDWTH)+204.   !  S/N at Req. Rel.
ccc      write(61,51) it,jf,freq,xf,xpwr,sfa,fbx,sn1
ccc51    format(' area noise=',2i3,6f10.4)
      IF(XF.LE.-999.0) then
         SN50=-999.0
         SNxx=-999.0
      end if
      SNA(IT,JF)=SN50         !  median S/N
      SNAxx(IT,JF)=SNxx       !  S/N at required reliability
ccc      TSNA(IT,JF)=XSN(2)
ccc      IF(SNA(IT,JF).GE.JRSN) TSNA(IT,JF)=XSN(1)
      CALL SNPROB(SNA(IT,JF),RSN,DUSN,DLSN,PSN(IT,JF))
ccc      write(61,1257) it,jf,zspwr(it,jf),yspwr(it,jf),sna(it,jf),jrsn,
ccc     +               dusn,dlsn,psn(it,jf)
ccc1257  format(2i5,3f10.3,i5,3f10.4)
ccc      write(61,'('' xpwr,sfa,sn1='',4f10.4)') xpwr,sfa,sn1,freq
      call outarea(LUO,ix,iy,RLATD,RLONGD,FREL(12),chmode,ielevang,
     +             XDBU(IT,JF),SNA(IT,JF),PSN(IT,JF),SNAxx(IT,JF))
c*********************************************
1900  CONTINUE
      call sou@(']')
c*****************************************************************
C.....END OF RUN
  600 CONTINUE
C.....CLOSE FILES
      CLOSE(LUI)
      CLOSE(LUO)
c**************************************************************
c          do we need to PLOT the result?
c**************************************************************
      if(area.eq.'A' .and. (area_meth.eq.'p' .or. area_meth.eq.'s'))then
         write(*,'('' Plotting:'',a)') filein
         nchf=lcount(fileout,40)
         PROGRAM=run_directory(1:nch_run-3)//
     +            'bin_win\worldwin.exe '//
     +            run_directory(1:nch_run)//' AREADATA '//
     +            fileout(13:nchf)//' '//
     +            area_meth
         nch=lcount(PROGRAM,300)
         call gh_exec(PROGRAM,nch,1)      !  execute and wait
      end if
c**************************************************************
      if(area.eq.'A') then!  area coverage, are there more files to process?
         ich=filein(nch3:nch3)
         if(ich.eq.'9') then    !  no, we are done
            go to 950
         else             !  process next file in order
            ich=char(ichar(ich)+1)
            filein(nch3:nch3)=ich     !  new name of input file
            nch=lcount(fileout,40)
            fileout(nch:nch)=ich      !  new name of output file
            go to 50      !  calculate another file
         end if
      else if(area.eq.'B') then!  Batch point-point, next circuit
         call batch(38,'REC533',filein,icircuit,*999)
         go to 50         !  process next batch circuit
      else                !  point-to-point, view results
      end if
      go to 999
900   write(*,901) filein
901   format(' Could not OPEN file=',a)
      stop 'OPEN error in rec533w at 900'
920   write(*,901) 'recareaw.cir  for BATCH calculations'
      stop 'OPEN error in rec533w at 920'
c***********************************************************************
930   call get_run
      nchd=lenchar(run_directory)
      write(*,'(''run_directory='',a)') run_directory(1:nchd)
      open(71,file=run_directory(1:nchd-3)//'news_win\command.txt',
     +        status='old',err=940)
      rewind(71)
935   read(71,'(a)',end=936) alf80
      nch=lenchar(alf80)
      if(nch.eq.0) nch=1
      write(*,'(a)') alf80(1:nch)
      go to 935
936   close(71)
940   stop 'REC533W.EXE not executed properly.'
c***********************************************************************
950   if(iarea_batch.eq.0) go to 999      !  not area coverage batch run
      if(icancel_batch.ne.0) go to 999
         read(61,'(a)',end=999) filein
         iarea_batch=iarea_batch+1
         write(*,39) iarea_batch,narea_batch,filein
         write(alf_iarea_batch,'(i4)') iarea_batch
         call window_update@(alf_iarea_batch)
         call seconds_since_1980@(end_time)    !  use to calc time
         elapsed=end_time-start_time
         write(alf_elapsed_time,'(f8.1)') elapsed/60.
         call window_update@(alf_elapsed_time)
         fileout='recareax'
         call areamap(filein,fileout,area_meth)
         areach='A'
         filein='recareax.da1'
         fileout='..\AREADATA\'
         go to 40      !  begin next area calculation
999   continue
      if(iarea_batch.ne.0) then      !  batch area finish
         idone=iarea_batch           !  number of files done
         if(iabort.ne.0) then
            write(*,'(1x)')
            idone=idone-1            !  current one was not done
         end if
         iprocess_ctrl=0
         call window_update@(iprocess_ctrl)    !  remove process message
         call seconds_since_1980@(end_time)    !  use to calc time
         elapsed=end_time-start_time
         write(*,997) idone,elapsed/60.
997      format(50(1h*),/,
     +          i5,' BATCH Area calculations done.',f10.1,' minutes',/,
     +          50(1h*))
      end if
      if(iciraf_flag.ne.0) then      !  CIRAF finish
         iprocess_ctrl=0
         call window_update@(iprocess_ctrl)    !  remove process message
      end if
      call underflow_count@(icount)
ccc      write(*,'(i5,''  underflows'')') icount
      if(area.ne.'B'.and.iarea_batch.eq.0)then!don't destroy BATCH output window
         if(iquiet.eq.0) then
            call destroy_window(window_handle)
         else
            if(icount.ne.0) then
               window_handle=get_default_window@()
               call destroy_window(window_handle)
            end if
         end if
      else
         if(iabort.ne.0) write(*,998)
998                      format(/,' Batch processing has been aborted.')
      end if
      call underflow_count@(count_underflow)  !  see if any underflows occured
ccc      write(*,'(''underflow='',i8)') count_underflow
      END
c--------------------------------------------------------------
